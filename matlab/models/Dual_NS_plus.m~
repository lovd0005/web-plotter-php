%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Double Neutron Star Model %
% f m xi numpoints          % 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function Omega_DNS = Dual_NS (f,m,xi,numpoints)

constant;

% Variable Parameters
lambda = xi*lambda_NS();	% per solar mass
mm = m*Msolar;		% gram 
Kb = (G*pi)^(2/3)*mm^(5/3)/3;  % cm^2*g/s^(4/3)

% Parameter of the upper bounds 
fgmax = c^3/(6^1.5*pi*G*(2^(6/5)*mm)); % per second
%max of the frequence , here 2^(6/5)*m is the total mass of the two NS
zmax = 6;           % dimensionless --max of the redshift

% value of the Non integral part
Const = ((8*pi*G)/(3*c^2*(H0Mpc)^3))*lambda*Kb/yr;
% Mpc^3*s^(2/3)*year/Msolar
%{ 
lambda = 2.7e-4 in the code by T. Regimbau
Const = 8e-9 doesn't matches the value in the paper
taking lambda = 47.9495, Const = 1.4e-9 matched the value found in the code
by T. Regimbau. The plot generated by lambda = 47.9495 fits the one show in
the paper. But Const still doesn't match with equation.27 in the paper.
%}

disp ('*************************************************')
disp ('Beginning DNS Calculation')

%% Finally get omega    
Omega_DNS = zeros (1,numpoints);
for i=1:numpoints

    if (f(i)<10 || f(i) > fgmax)
		Omega_DNS(i) = 0;
    else    
        if (fgmax/f(i) - 1 < zmax)
            zsup = fgmax/f(i) - 1;
        else
            zsup = zmax;
        end      
		Omega_DNS(i) = Const*f(i).^(2/3)*DNS_integrand(zsup);
    end
    
end

disp ('Finished DNS Calculation')
disp ('*************************************************')

% disp (Omega_DNS);
% keyboard
% loglog (f,Omega_DNS,'marker','*');
% disp ('number of zeros is:')
% disp (numzeros)
end
